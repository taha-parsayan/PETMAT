classdef PETMAT < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        Label                           matlab.ui.control.Label
        CompletedGauge                  matlab.ui.control.LinearGauge
        CompletedLabel                  matlab.ui.control.Label
        SmoothingthePETimageListBox     matlab.ui.control.ListBox
        SmoothingthePETimageLabel       matlab.ui.control.Label
        NormalizationinterpolationListBox  matlab.ui.control.ListBox
        RegistrationinterpolationLabel  matlab.ui.control.Label
        CoregistrationinterpolationListBox  matlab.ui.control.ListBox
        CoregistrationinterplationLabel  matlab.ui.control.Label
        PETMATLabel                     matlab.ui.control.Label
        SubjectIDsTextArea              matlab.ui.control.TextArea
        SubjectIDsLabel                 matlab.ui.control.Label
        ExitButton                      matlab.ui.control.Button
        AnalyzeButton                   matlab.ui.control.Button
        DatafolderpathEditField         matlab.ui.control.EditField
        DatafolderpathEditFieldLabel    matlab.ui.control.Label
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: AnalyzeButton
        function AnalyzeButtonPushed(app, event)
            
                                 
            % Make sure that the PET volume names start with s or v. SPM will name the new
            % volumes 1, 2, 3 ... . If they start with I, it would be 0, 1, 2, ... for some reason
            subject_list = app.SubjectIDsTextArea.Value;
            address_base = app.DatafolderpathEditField.Value;
            
            subject_IDs = split(subject_list, ',');
            subject_IDs = strtrim(subject_IDs);

            coreg_interp = (app.CoregistrationinterpolationListBox.ValueIndex) - 1;
            nomal_interp = (app.NormalizationinterpolationListBox.ValueIndex) - 1;

            smooth_mode = app.SmoothingthePETimageListBox.ValueIndex;
            if (smooth_mode == 1)
                smooth_kernel = [5 5 5];
            elseif (smooth_mode == 2)
                smooth_kernel = [8 8 8];
            elseif (smooht_mode == 3)
                smooth_kernel = [10 10 10];
            end

            % Show the percentage of pre-processing completion
            app.CompletedGauge.Value = 0;
            drawnow; % Force GUI to update immediately
            addition = 1/(length(subject_IDs) * 3); % will be added to the %completion during process


            
            for k = 1:length(subject_IDs) %itterate on subjects

                current_subject = subject_IDs{k};
                
                current_address = string(fullfile(address_base, current_subject));
                disp(current_address)
                disp(current_address)
                cd(current_address);
                coefficient = 1;

                nii_files = dir('*.nii'); %number of nifti file
                flag = length(nii_files) - 1; % number of PET scans

                disp(' ')
                disp('----------------------------------------------------------------')
                disp(['************* Subject: ' current_subject])
                disp(['Number of PET volumes: ' num2str(flag)])


                disp('---Setting image origins')
                for i = 1:numel(nii_files)

                    img_path = fullfile(nii_files(i).folder, nii_files(i).name);
                    V = spm_vol(img_path);
                    center_mm = (V.dim + 1)/2 * V.mat(1:3, 1:3)';
                    V.mat(1:3, 4) = -center_mm;
                    vol_data = spm_read_vols(V);

                    [x,name,y] = fileparts(nii_files(i).name);
                    if (name == "T1")
                        new_img_path = fullfile(nii_files(i).folder, [name '.nii']);
                    else
                        new_img_path = fullfile(nii_files(i).folder, [num2str(i)-1 name '.nii']);
                    end
                    V.fname = new_img_path;
                    spm_write_vol(V, vol_data);

                end
                %--------------------------------------------

                disp('')
                disp('---Coregistration')
                ref_img = "T1.nii"; ref_vol = spm_vol(char(ref_img));
                src_img = dir("1*.nii").name; src_vol = spm_vol(char(src_img));
                matlabbatch{1}.spm.spatial.coreg.estimate.ref = {ref_vol.fname};
                matlabbatch{1}.spm.spatial.coreg.estimate.source = {src_vol.fname};
                matlabbatch{1}.spm.spatial.coreg.estimate.other = {''};
                spm_jobman('run', matlabbatch)
                matlabbatch{2}.spm.spatial.coreg.write.ref = {ref_vol.fname};
                matlabbatch{2}.spm.spatial.coreg.write.source = {src_vol.fname};
                matlabbatch{2}.spm.spatial.coreg.write.roptions.interp = coreg_interp;
                spm_jobman('run', matlabbatch)

                clear("matlabbatch");

                ref_img = dir("r1*.nii").name; ref_vol = spm_vol(char(ref_img));

                if flag == 6
                    for i = 2:6 % CHANGE 

                        src_img = dir([num2str(i) '*.nii']).name; src_vol = spm_vol(char(src_img));
                        matlabbatch{1}.spm.spatial.coreg.estimate.ref = {ref_vol.fname};
                        matlabbatch{1}.spm.spatial.coreg.estimate.source = {src_vol.fname};
                        matlabbatch{1}.spm.spatial.coreg.estimate.other = {''};
                        spm_jobman('run', matlabbatch)
                        matlabbatch{2}.spm.spatial.coreg.write.ref = {ref_vol.fname};
                        matlabbatch{2}.spm.spatial.coreg.write.source = {src_vol.fname};
                        matlabbatch{2}.spm.spatial.coreg.write.roptions.interp = 1;
                        spm_jobman('run', matlabbatch)

                    end

                    spm_imcalc({dir('r1*.nii').name, dir('r2*.nii').name, dir('r3*.nii').name,dir('r4*.nii').name,dir('r5*.nii').name,dir('r6*.nii').name}, 'coregister_PET.nii', 'i1+i2+i3+i4+i5+i6'); %CHANGE

                elseif flag == 2

                    i = 2;

                    src_img = dir([num2str(i) '*.nii']).name; src_vol = spm_vol(char(src_img));
                    matlabbatch{1}.spm.spatial.coreg.estimate.ref = {ref_vol.fname};
                    matlabbatch{1}.spm.spatial.coreg.estimate.source = {src_vol.fname};
                    matlabbatch{1}.spm.spatial.coreg.estimate.other = {''};
                    spm_jobman('run', matlabbatch)
                    matlabbatch{2}.spm.spatial.coreg.write.ref = {ref_vol.fname};
                    matlabbatch{2}.spm.spatial.coreg.write.source = {src_vol.fname};
                    matlabbatch{2}.spm.spatial.coreg.write.roptions.interp = 1;
                    spm_jobman('run', matlabbatch)

                    spm_imcalc({dir('r1*.nii').name, dir('r2*.nii').name}, 'coregister_PET.nii', 'i1+i2');


                elseif flag == 1

                    spm_imcalc({dir('r1*.nii').name}, 'coregister_PET.nii', 'i1 * 1'); %Just to change the name

                end


                clear("matlabbatch");

                % Show the percentage of pre-processing completion
                app.CompletedGauge.Value = (k/length(subject_IDs) - 2*addition) * 100;
                drawnow; % Force GUI to update immediately


                %--------------------------------------------

                disp('')
                disp('---Normalization')

                spm('defaults', 'FMRI');
                spm_jobman('initcfg');
                matlabbatch{1}.spm.spatial.normalise.est.subj.vol = {'T1.nii'};
                spm_jobman('run', matlabbatch)

                T1_vol = spm_vol('T1.nii');
                PET_vol = spm_vol('coregister_PET.nii');
                def_vol = spm_vol('y_T1.nii');

                clear("matlabbatch");

                matlabbatch{1}.spm.spatial.normalise.write.subj.def = {'y_T1.nii'};
                matlabbatch{1}.spm.spatial.normalise.write.subj.resample = {'T1.nii'};
                matlabbatch{1}.spm.spatial.normalise.write.roptions.bb = [-78 -112 -70; 78 76 85];
                matlabbatch{1}.spm.spatial.normalise.write.roptions.vox = [1 1 1];
                matlabbatch{1}.spm.spatial.normalise.write.roptions.interp = nomal_interp;

                spm_jobman('run', matlabbatch)

                normalized_path = fullfile(fileparts('T1.nii'), ['w' T1_vol.fname]);
                movefile(normalized_path, 'std_T1.nii', 'f')


                clear("matlabbatch");

                matlabbatch{1}.spm.spatial.normalise.write.subj.def = {'y_T1.nii'};
                matlabbatch{1}.spm.spatial.normalise.write.subj.resample = {'coregister_PET.nii'};
                matlabbatch{1}.spm.spatial.normalise.write.roptions.bb = [-78 -112 -70; 78 76 85];
                matlabbatch{1}.spm.spatial.normalise.write.roptions.vox = [1 1 1];
                matlabbatch{1}.spm.spatial.normalise.write.roptions.interp = nomal_interp;

                spm_jobman('run', matlabbatch)

                normalized_path = fullfile(fileparts('coregister_PET.nii'), ['w' PET_vol.fname]);
                movefile(normalized_path, 'std_coregister_PET.nii', 'f')



                % Show the percentage of pre-processing completion
                app.CompletedGauge.Value = (k/length(subject_IDs) - 1*addition) * 100;
                drawnow; % Force GUI to update immediately

                % ------------------------------------
                disp(' ')
                disp('---Segmenting std_T1')

                std_T1_vol = spm_vol('std_T1.nii');

                clear("matlabbatch");
                matlabbatch{1}.spm.spatial.preproc.channel(1).vols = {std_T1_vol.fname};
                matlabbatch{1}.spm.spatial.preproc.channel(1).biasreg = 0.001;
                matlabbatch{1}.spm.spatial.preproc.channel(1).biasfwhm = 60;
                matlabbatch{1}.spm.spatial.preproc.channel(1).write = [0 1];
                spm_jobman('run', matlabbatch)
                clear("matlabbatch");

                spm_imcalc({'c1std_T1.nii'}, 'GM_MASK.nii', 'i1 > 0.2');

                spm_imcalc({'GM_MASK.nii', 'std_T1.nii'}, 'GM.nii', 'i1 .* i2');


                %--------------------------------------------
                disp(' ')

                if (smooth_mode ~= 0)

                    disp('---Smoothing std_PET')
    
                    std_PET_vol = spm_vol('std_coregister_PET.nii');
    
                    clear("matlabbatch");
                    matlabbatch{1}.spm.spatial.smooth.data = {std_PET_vol.fname};
                    matlabbatch{1}.spm.spatial.smooth.fwhm = smooth_kernel;
                    output_path = [pwd, spm_file(std_PET_vol.fname, 'basename')];
                    matlabbatch{1}.spm.spatial.smooth.prefix = 'smooth_';
                    matlabbatch{1}.spm.spatial.smooth.data = {std_PET_vol.fname};
                    spm_jobman('run', matlabbatch)
                    clear("matlabbatch");

                    disp(' ')
                    disp('---Finalizing')
    
                    expression = sprintf('i1 * %g', coefficient);
                    disp(pwd)
                    disp(expression)
                    spm_imcalc({'smooth_std_coregister_PET.nii'}, 'SUV.nii', expression);
    
                    spm_imcalc({'SUV.nii', 'GM_MASK.nii'}, 'SUV_GM.nii', 'i1 .* i2');

                else
                    disp(' ')
                    disp('---Finalizing')
    
                    expression = sprintf('i1 * %g', coefficient);
                    disp(pwd)
                    disp(expression)
                    spm_imcalc({'std_coregister_PET.nii'}, 'SUV.nii', expression);
    
                    spm_imcalc({'SUV.nii', 'GM_MASK.nii'}, 'SUV_GM.nii', 'i1 .* i2');
                end


            % Show the percentage of pre-processing completion
            app.CompletedGauge.Value = (k/length(subject_IDs)) * 100;
            drawnow; % Force GUI to update immediately



            end

            disp('------')
            disp('Pre-processings ended without any errors.')
    

        end

        % Button pushed function: ExitButton
        function ExitButtonPushed(app, event)
            closereq();
        end

        % Callback function
        function TestButtonPushed(app, event)

        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.902 0.902 0.902];
            app.UIFigure.Position = [700 200 628 567];
            app.UIFigure.Name = 'MATLAB App';

            % Create DatafolderpathEditFieldLabel
            app.DatafolderpathEditFieldLabel = uilabel(app.UIFigure);
            app.DatafolderpathEditFieldLabel.FontName = 'Ubuntu';
            app.DatafolderpathEditFieldLabel.FontSize = 14;
            app.DatafolderpathEditFieldLabel.Position = [14 492 113 22];
            app.DatafolderpathEditFieldLabel.Text = 'Data folder path:';

            % Create DatafolderpathEditField
            app.DatafolderpathEditField = uieditfield(app.UIFigure, 'text');
            app.DatafolderpathEditField.Tag = 'data_folder_address';
            app.DatafolderpathEditField.FontName = 'Ubuntu';
            app.DatafolderpathEditField.FontSize = 14;
            app.DatafolderpathEditField.Position = [14 468 603 22];

            % Create AnalyzeButton
            app.AnalyzeButton = uibutton(app.UIFigure, 'push');
            app.AnalyzeButton.ButtonPushedFcn = createCallbackFcn(app, @AnalyzeButtonPushed, true);
            app.AnalyzeButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.AnalyzeButton.FontName = 'Ubuntu';
            app.AnalyzeButton.FontSize = 14;
            app.AnalyzeButton.FontColor = [1 1 1];
            app.AnalyzeButton.Position = [15 13 100 25];
            app.AnalyzeButton.Text = 'Analyze';

            % Create ExitButton
            app.ExitButton = uibutton(app.UIFigure, 'push');
            app.ExitButton.ButtonPushedFcn = createCallbackFcn(app, @ExitButtonPushed, true);
            app.ExitButton.BackgroundColor = [1 0 0];
            app.ExitButton.FontName = 'Ubuntu';
            app.ExitButton.FontSize = 14;
            app.ExitButton.FontColor = [1 1 1];
            app.ExitButton.Position = [128 13 100 25];
            app.ExitButton.Text = 'Exit';

            % Create SubjectIDsLabel
            app.SubjectIDsLabel = uilabel(app.UIFigure);
            app.SubjectIDsLabel.FontName = 'Ubuntu';
            app.SubjectIDsLabel.FontSize = 14;
            app.SubjectIDsLabel.Position = [14 440 79 22];
            app.SubjectIDsLabel.Text = 'Subject IDs:';

            % Create SubjectIDsTextArea
            app.SubjectIDsTextArea = uitextarea(app.UIFigure);
            app.SubjectIDsTextArea.Position = [14 277 603 161];

            % Create PETMATLabel
            app.PETMATLabel = uilabel(app.UIFigure);
            app.PETMATLabel.FontName = 'Ubuntu';
            app.PETMATLabel.FontSize = 24;
            app.PETMATLabel.FontWeight = 'bold';
            app.PETMATLabel.Position = [15 523 591 45];
            app.PETMATLabel.Text = 'PETMAT';

            % Create CoregistrationinterplationLabel
            app.CoregistrationinterplationLabel = uilabel(app.UIFigure);
            app.CoregistrationinterplationLabel.VerticalAlignment = 'top';
            app.CoregistrationinterplationLabel.FontSize = 14;
            app.CoregistrationinterplationLabel.Position = [14 245 209 22];
            app.CoregistrationinterplationLabel.Text = 'Co-registration interpolation:';

            % Create CoregistrationinterpolationListBox
            app.CoregistrationinterpolationListBox = uilistbox(app.UIFigure);
            app.CoregistrationinterpolationListBox.Items = {'Nearest neighbor', 'Trilinear', 'Quadratic B-spline', 'Cubic B-spline', '4th-degree B-spline', '5th-degree B-spline', '6th-degree B-spline', '7th-degree B-spline'};
            app.CoregistrationinterpolationListBox.Position = [14 101 209 148];
            app.CoregistrationinterpolationListBox.Value = 'Trilinear';

            % Create RegistrationinterpolationLabel
            app.RegistrationinterpolationLabel = uilabel(app.UIFigure);
            app.RegistrationinterpolationLabel.FontSize = 14;
            app.RegistrationinterpolationLabel.Position = [237 249 202 22];
            app.RegistrationinterpolationLabel.Text = 'Normalization interpolation:';

            % Create NormalizationinterpolationListBox
            app.NormalizationinterpolationListBox = uilistbox(app.UIFigure);
            app.NormalizationinterpolationListBox.Items = {'Nearest neighbor', 'Trilinear', 'Quadratic B-spline', 'Cubic B-spline', '4th-degree B-spline', '5th-degree B-spline', '6th-degree B-spline', '7th-degree B-spline'};
            app.NormalizationinterpolationListBox.Position = [237 101 202 148];
            app.NormalizationinterpolationListBox.Value = '4th-degree B-spline';

            % Create SmoothingthePETimageLabel
            app.SmoothingthePETimageLabel = uilabel(app.UIFigure);
            app.SmoothingthePETimageLabel.FontSize = 14;
            app.SmoothingthePETimageLabel.Position = [452 249 172 22];
            app.SmoothingthePETimageLabel.Text = 'Smoothing the PET image:';

            % Create SmoothingthePETimageListBox
            app.SmoothingthePETimageListBox = uilistbox(app.UIFigure);
            app.SmoothingthePETimageListBox.Items = {'No smoothing', '5 FWHM', '8 FWHM', '10 FWHM'};
            app.SmoothingthePETimageListBox.Position = [453 101 164 148];
            app.SmoothingthePETimageListBox.Value = '5 FWHM';

            % Create CompletedLabel
            app.CompletedLabel = uilabel(app.UIFigure);
            app.CompletedLabel.HorizontalAlignment = 'center';
            app.CompletedLabel.Position = [365 50 70 22];
            app.CompletedLabel.Text = 'Completed';

            % Create CompletedGauge
            app.CompletedGauge = uigauge(app.UIFigure, 'linear');
            app.CompletedGauge.Position = [352 10 265 41];

            % Create Label
            app.Label = uilabel(app.UIFigure);
            app.Label.Position = [352 50 13 22];
            app.Label.Text = '%';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = PETMAT

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
